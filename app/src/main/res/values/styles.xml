<resources xmlns:tools="http://schemas.android.com/tools">

    <!-- Base application theme. -->
    <style name="AppTheme" parent="Theme.MaterialComponents.DayNight.NoActionBar">
        <!-- Customize your theme here. -->
        <item name="colorPrimary">@color/colorPrimary</item>
        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
        <item name="colorAccent">@color/colorAccent</item>
        <item name="android:windowLightStatusBar" tools:targetApi="23">true</item>
    </style>

    <style name="AppThemeActionBar" parent="Theme.MaterialComponents.DayNight.DarkActionBar">
        <!-- Customize your theme here. -->
        <item name="colorPrimary">@color/colorAccent</item> <!--toolbar -->
        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
        <item name="colorAccent">@color/colorAccent</item>
        <item name="android:textColor">@color/colorAccent</item>
        <item name="android:windowLightStatusBar" tools:targetApi="23">true</item>
    </style>

    <style name="AppTheme.NoActionBar">
        <item name="windowActionBar">false</item>
        <item name="windowNoTitle">true</item>
    </style>

    <style name="PBarTheme">
        <item name="android:colorSecondary" tools:targetApi="n_mr1">@color/red</item>
    </style>

    <style name="drawerFont">
        <item name="android:textSize">14sp</item>
        <item name="android:fontFamily">@font/roboto_medium</item>
    </style>

    <style name="ThemeOverlay.App.TextInputLayout" parent="Widget.MaterialComponents.TextInputLayout.OutlinedBox">
        <item name="colorPrimary">@color/colorPrimaryDark</item>  //Activated color
        <item name="colorOnSurface">@color/colorPrimary</item>    //Normal color
<!--        <item name="colorError">@color/colorPrimary</item>        //Error color-->

        <!--Note: When setting a materialThemeOverlay on a custom TextInputLayout style, don’t forget to set editTextStyle to either a @style/Widget.MaterialComponents.TextInputEditText.* style or to a custom one that inherits from that.
        The TextInputLayout styles set materialThemeOverlay that overrides editTextStyle with the specific TextInputEditText style needed. Therefore, you don’t need to specify a style tag on the edit text.-->
        <item name="editTextStyle">@style/Widget.MaterialComponents.TextInputEditText.OutlinedBox</item>
    </style>



<!--    <style name="Theme.KTCLifeApp" parent="Theme.MaterialComponents.DayNight.DarkActionBar">-->
<!--        &lt;!&ndash; Primary brand color. &ndash;&gt;-->
<!--        <item name="colorPrimary">@color/purple_500</item>-->
<!--        <item name="colorPrimaryVariant">@color/purple_700</item>-->
<!--        <item name="colorOnPrimary">@color/white</item>-->
<!--        &lt;!&ndash; Secondary brand color. &ndash;&gt;-->
<!--        <item name="colorSecondary">@color/teal_200</item>-->
<!--        <item name="colorSecondaryVariant">@color/teal_700</item>-->
<!--        <item name="colorOnSecondary">@color/black</item>-->
<!--        &lt;!&ndash; Status bar color. &ndash;&gt;-->
<!--        <item name="android:statusBarColor" tools:targetApi="l">?attr/colorPrimaryVariant</item>-->
<!--        &lt;!&ndash; Customize your theme here. &ndash;&gt;-->
<!--    </style>-->
</resources>
